/// <summary>
/// Settings file manager. Autogenerated by CnPack wizard
/// </summary>
unit uIniManager;

interface

uses
  Classes, SysUtils, IniFiles, Forms, Windows;

const
  csIniHotKeysSection = 'HotKeys';
  csIniRegExSection   = 'RegEx';

  { Section: HotKeys }
  csIniHotKeysPaste   = 'Paste';

  { Section: RegEx }
  csIniRegExMatch     = 'Match';
  csIniRegExReplace   = 'Replace';

type
  TIniManager = class(TObject)
  private
    { Section: HotKeys }
    FHotKeysPaste: Integer;

    { Section: RegEx }
    FRegExMatch: string;
    FRegExReplace: string;
  public
    procedure LoadSettings(Ini: TIniFile);
    procedure SaveSettings(Ini: TIniFile);

    procedure LoadFromFile(const FileName: string);
    procedure SaveToFile(const FileName: string);

    { Section: HotKeys }
    property HotKeysPaste: Integer read FHotKeysPaste write FHotKeysPaste;

    { Section: RegEx }
    property RegExMatch: string read FRegExMatch write FRegExMatch;
    property RegExReplace: string read FRegExReplace write FRegExReplace;
  end;

var
  IniSettings: TIniManager = nil;

implementation

procedure TIniManager.LoadSettings(Ini: TIniFile);
begin
  if Ini <> nil then
  begin
    { Section: HotKeys }
    FHotKeysPaste := Ini.ReadInteger(csIniHotKeysSection, csIniHotKeysPaste, 16450 { ctrl + B } );

    { Section: RegEx }
    FRegExMatch := Ini.ReadString(csIniRegExSection, csIniRegExMatch, '(^.*$)');
    FRegExReplace := Ini.ReadString(csIniRegExSection, csIniRegExReplace, '/// $1');
  end;
end;

procedure TIniManager.SaveSettings(Ini: TIniFile);
begin
  if Ini <> nil then
  begin
    { Section: HotKeys }
    Ini.WriteInteger(csIniHotKeysSection, csIniHotKeysPaste, FHotKeysPaste);

    { Section: RegEx }
    Ini.WriteString(csIniRegExSection, csIniRegExMatch, FRegExMatch);
    Ini.WriteString(csIniRegExSection, csIniRegExReplace, RegExReplace);
  end;
end;

procedure TIniManager.LoadFromFile(const FileName: string);
var
  Ini: TIniFile;
begin
  Ini := TIniFile.Create(FileName);
  try
    LoadSettings(Ini);
  finally
    FreeAndNil(Ini);
  end;
end;

procedure TIniManager.SaveToFile(const FileName: string);
var
  Ini: TIniFile;
begin
  Ini := TIniFile.Create(FileName);
  try
    SaveSettings(Ini);
  finally
    FreeAndNil(Ini);
  end;
end;

initialization

IniSettings := TIniManager.Create;

finalization

FreeAndNil(IniSettings);

end.
